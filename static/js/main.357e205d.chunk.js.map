{"version":3,"sources":["components/footer/Footer.tsx","components/form/TodoForm.tsx","components/todo/TodoItem.tsx","components/todo/TodoList.tsx","apis/todo.ts","pages/FormPage.tsx","pages/TodoPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","props","todoAmount","react","className","Tag","type","disabled","concat","Button","kind","small","TodoForm","state","title","desc","isTitleValid","isDescValid","changeHandler","e","target","name","value","Object","defineProperty","_this","setState","submitHandler","preventDefault","addTodo","_this$state","trim","isAddLoading","this","_this$state2","onSubmit","FormGroup","legendText","TextInput","id","labelText","placeholder","hideLabel","invalidText","onChange","invalid","TextArea","iconDescription","InlineLoading","description","React","TodoItem","todo","deleteTodo","StructuredList","noWrap","Icon","icon","iconDelete","onClick","TodoList","todos","history","selection","border","head","iconAdd","push","length","map","todo_TodoItem","key","addTodoAPI","cb","JSON","parse","localStorage","getItem","arr","assign","setItem","stringify","deleteTodoAPI","filter","filterTodos","status","filteredTodos","isCompleted","FormPage","setTimeout","todoFormProps","TodoForm_TodoForm","TodoPage","isLoading","_deleteTodo","_this2","listTodos","todoListProps","footerProps","clickFilterHandler","StructuredList_Skeleton","components_todo_TodoList","components_footer_Footer","App","react_default","a","createElement","react_router_dom","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UA4BeA,SAnBsC,SAAAC,GAAS,IACrDC,EAAcD,EAAdC,WACP,OACEC,EAAA,wBAAQC,UAAU,eAChBD,EAAA,cAACE,EAAA,EAAD,CAAKD,UAAU,aAAaE,KAAK,OAAOC,UAAU,GAAlD,cAAAC,OACiBN,IAEjBC,EAAA,qBAAKC,UAAU,UACbD,EAAA,cAACM,EAAA,EAAD,CAAQC,KAAK,WAAWN,UAAU,aAAaO,OAAK,GAApD,OAGAR,EAAA,cAACM,EAAA,EAAD,CAAQC,KAAK,WAAWN,UAAU,aAAaO,OAAK,GAApD,yDCGaC,oNAInBC,MAAQ,CACNC,MAAO,GACPC,KAAM,GACNC,cAAc,EACdC,aAAa,KAEfC,cAAgB,SAAAC,GACd,IAAIC,EAAcD,EAAEC,OAChBC,EAAeD,EAAOC,KACtBC,EAAgBF,EAAOE,MACrBT,EAAUU,OAAAC,EAAA,EAAAD,CAAA,GACbF,EAAOC,GAEVG,EAAKC,SAASb,MAGhBc,cAAgB,SAAAR,GACdA,EAAES,iBADiB,IAEXC,EAAYJ,EAAKxB,MAAjB4B,QAFWC,EAGKL,EAAKZ,MAArBC,EAHWgB,EAGXhB,MAAOC,EAHIe,EAGJf,KACM,KAAjBD,EAAMiB,OACRN,EAAKC,SAAS,CACZV,cAAc,IAES,KAAhBD,EAAKgB,OACdN,EAAKC,SAAS,CACZT,aAAa,IAGfY,EAAQf,EAAOC,4EAGV,IACCiB,EAAiBC,KAAKhC,MAAtB+B,aADDE,EAE+BD,KAAKpB,MAAnCG,EAFDkB,EAEClB,aAAcC,EAFfiB,EAEejB,YACtB,OACEd,EAAA,sBAAMC,UAAU,YAAY+B,SAAUF,KAAKN,eACzCxB,EAAA,cAACiC,EAAA,EAAD,CAAWhC,UAAU,aAAaiC,WAAW,IAC3ClC,EAAA,cAACmC,EAAA,EAAD,CACEC,GAAG,QACHnC,UAAU,aACVkB,MAAOW,KAAKpB,MAAMC,MAClB0B,UAAU,aACVnB,KAAK,QACLf,KAAK,GACLmC,YAAY,yCACZC,WAAW,EACXC,YAAY,uBACZC,SAAUX,KAAKf,cACf2B,QAAS7B,KAGbb,EAAA,cAACiC,EAAA,EAAD,CAAWhC,UAAU,aAAaiC,WAAW,IAC3ClC,EAAA,cAAC2C,EAAA,EAAD,CACEzB,KAAK,OACLjB,UAAU,aACVsC,WAAW,EACXF,UAAU,sBACVG,YAAY,OACZF,YAAY,mBACZF,GAAG,OACHjB,MAAOW,KAAKpB,MAAME,KAClB6B,SAAUX,KAAKf,cACf2B,QAAS5B,KAGbd,EAAA,cAACM,EAAA,EAAD,CACEC,KAAK,UACLN,UAAU,aACV2C,gBAAgB,WAChBpC,OAAK,EACLL,KAAK,UAEJ0B,EAAe7B,EAAA,cAAC6C,EAAA,EAAD,CAAeC,YAAY,KAAQ,oBA7EvBC,0CCYvBC,EArB0C,SAAAlD,GAAS,IACxDmD,EAAqBnD,EAArBmD,KAAMC,EAAepD,EAAfoD,WACPd,EAAmBa,EAAnBb,GAAIzB,EAAesC,EAAftC,MAAOC,EAAQqC,EAARrC,KAClB,OACEZ,EAAA,cAACmD,EAAA,EAAD,KACEnD,EAAA,cAACmD,EAAA,EAAD,CAAoBC,QAAM,GAAEzC,GAC5BX,EAAA,cAACmD,EAAA,EAAD,KAAqBvC,GACrBZ,EAAA,cAACmD,EAAA,EAAD,KACEnD,EAAA,cAACqD,EAAA,EAAD,CACEpD,UAAU,0BACVqD,KAAMC,IACNT,YAAY,mBACZU,QAAS,WACPN,EAAWd,SCqBRqB,SA5B0C,SAAA3D,GAAS,IACxD4D,EAA8B5D,EAA9B4D,MAAOC,EAAuB7D,EAAvB6D,QAAST,EAAcpD,EAAdoD,WACxB,OACElD,EAAA,cAACmD,EAAA,EAAD,CAAuBS,WAAS,EAACC,QAAM,GACrC7D,EAAA,cAACmD,EAAA,EAAD,KACEnD,EAAA,cAACmD,EAAA,EAAD,CAAmBW,MAAI,GACrB9D,EAAA,cAACmD,EAAA,EAAD,CAAoBW,MAAI,GAAxB,SACA9D,EAAA,cAACmD,EAAA,EAAD,CAAoBW,MAAI,GAAxB,eACA9D,EAAA,cAACmD,EAAA,EAAD,CAAoBW,MAAI,GACtB9D,EAAA,cAACqD,EAAA,EAAD,CACEpD,UAAU,WACVqD,KAAMS,IACNjB,YAAY,aACZU,QAAS,WACPG,EAAQK,KAAK,eAMvBhE,EAAA,cAACmD,EAAA,EAAD,KACGO,EAAMO,OAAS,GACdP,EAAMQ,IAAI,SAAAjB,GAAI,OAAIjD,EAAA,cAACmE,EAAD,CAAUC,IAAKnB,EAAKb,GAAIa,KAAMA,EAAMC,WAAYA,UCxC/DmB,EAAa,SAACpB,EAAYqB,GACrC,IAAMZ,EAAQa,KAAKC,MAAMC,aAAaC,QAAQ,UAC1CC,EAAmB,GACF,IAAjBjB,EAAMO,QACRU,EAAM,CAACvD,OAAOwD,OAAO,CAAExC,GAAI,GAAKa,IAChCwB,aAAaI,QAAQ,QAASN,KAAKO,UAAUH,MAE7CA,EAAMjB,EAAMrD,OAAO,CACjBe,OAAOwD,OAAO,CAAExC,GAAIsB,EAAMA,EAAMO,OAAS,GAAG7B,GAAK,GAAKa,KAExDwB,aAAaI,QAAQ,QAASN,KAAKO,UAAUH,KAE7B,oBAAPL,GACTA,EAAGK,IAIMI,EAAgB,SAAC3C,EAAYkC,GACxC,IACMK,EADQJ,KAAKC,MAAMC,aAAaC,QAAQ,UAC5BM,OAAO,SAAA/B,GAAI,OAAIA,EAAKb,KAAOA,IAC7CqC,aAAaI,QAAQ,QAASN,KAAKO,UAAUH,IAC3B,oBAAPL,GACTA,EAAGK,IA0BDM,EAAc,SAACC,EAAgBxB,GACnC,IAAIyB,EAA6B,GACjC,OAAQD,GACN,IAAK,SACHC,EAAgBzB,EAAMsB,OAAO,SAAA/B,GAAI,OAAyB,IAArBA,EAAKmC,cAC1C,MAEF,IAAK,YACHD,EAAgBzB,EAAMsB,OAAO,SAAA/B,GAAI,OAAyB,IAArBA,EAAKmC,cAC1C,MAEF,QACED,EAAgBzB,EAEpB,OAAOyB,GCnDYE,6MAInB3E,MAAuB,CACrBmB,cAAc,KAGhBH,QAAU,SAACf,EAAeC,GAAiB,IACjC+C,EAAYrC,EAAKxB,MAAjB6D,QACFV,EAAO,CAAEtC,QAAOC,OAAMwE,aAAa,GACzC9D,EAAKC,SAAS,CACZM,cAAc,IAEhByD,WAAW,WACTjB,EAAWpB,EAAM,WACf3B,EAAKC,SAAS,CACZM,cAAc,IAEhB8B,EAAQK,KAAK,QAEd,8EAEI,IACCnC,EAAiBC,KAAKpB,MAAtBmB,aACF0D,EAAgB,CACpB7D,QAASI,KAAKJ,QACdG,gBAEF,OACE7B,EAAA,yBAASC,UAAU,kBACjBD,EAAA,cAACwF,EAAaD,WA/BgBxC,yBCGjB0C,6MAInB/E,MAAuB,CACrBgD,MAAO,GACPgC,WAAW,KAebC,YAAc,SAACvD,GACb2C,EAAc3C,EAAG,SAACsB,GAChBpC,EAAKC,SAAS,CAACmC,gGAdC,IAAAkC,EAAA9D,KAElBwD,WAAW,YFCU,SAACJ,EAAgBZ,GACF,OAAlCG,aAAaC,QAAQ,UACvBD,aAAaI,QAAQ,QAASN,KAAKO,UAAU,KAE/C,IAAMpB,EAAQa,KAAKC,MAAMC,aAAaC,QAAQ,UAC5B,oBAAPJ,GACTA,EAAGW,EAAYC,EAAQxB,IENrBmC,CAAU,GAAI,SAAAlB,GACZiB,EAAKrE,SAAS,CACZmC,MAAOiB,EACPe,WAAW,OAGd,sCAUI,IAAA/D,EACsBG,KAAKpB,MAA1BgD,EADD/B,EACC+B,MAAOgC,EADR/D,EACQ+D,UAETI,EAAgB,CACpBpC,QACAC,QAHkB7B,KAAKhC,MAAjB6D,QAINT,WAAYpB,KAAK6D,aAEbI,EAAc,CAClBhG,WAAY2D,EAAMO,OAClB+B,mBAAoB,cAEtB,OACEhG,EAAA,yBAASC,UAAU,kBAChByF,EACC1F,EAAA,cAACiG,EAAA,EAAD,MAEAjG,EAAA,cAACkG,EAAaJ,GAEhB9F,EAAA,cAACmG,EAAWJ,WA/CkBhD,iBCAvBqD,mLATX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjCY,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQE,KAAK,QAAQC,UAAWvB,YALxBwB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.357e205d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Button, Tag } from \"carbon-components-react\";\nimport \"./Footer.scss\";\n\nexport interface FooterProps {\n  todoAmount: Number;\n  clickFilterHandler: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nconst Footer: React.FunctionComponent<FooterProps> = props => {\n  const {todoAmount} = props;\n  return (\n    <footer className=\"todo-footer\">\n      <Tag className=\"some-class\" type=\"blue\" disabled={false}>\n        {`Todo items ${todoAmount}`}\n      </Tag>\n      <div className=\"action\">\n        <Button kind=\"tertiary\" className=\"some-class\" small>\n          All\n        </Button>\n        <Button kind=\"tertiary\" className=\"some-class\" small>\n          Completed\n        </Button>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import * as React from \"react\";\nimport {\n  TextInput,\n  Form,\n  Button,\n  TextArea,\n  FormGroup,\n  InlineLoading\n} from \"carbon-components-react\";\nimport \"./TodoForm.scss\";\n\ninterface TodoFormProps {\n  addTodo: (title: string, desc: string) => void;\n  isAddLoading: boolean;\n}\n\ninterface TodoFormState {\n  title: string;\n  desc: string;\n  isTitleValid: boolean;\n  isDescValid: boolean;\n}\n\nexport default class TodoForm extends React.PureComponent<\n  TodoFormProps,\n  TodoFormState\n> {\n  state = {\n    title: \"\",\n    desc: \"\",\n    isTitleValid: false,\n    isDescValid: false\n  };\n  changeHandler = e => {\n    let target: any = e.target;\n    let name: string = target.name;\n    let value: string = target.value;\n    const state: any = {\n      [name]: value\n    };\n    this.setState(state);\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    const { addTodo } = this.props;\n    const { title, desc } = this.state;\n    if (title.trim() === \"\") {\n      this.setState({\n        isTitleValid: true\n      });\n    } else if (desc.trim() === \"\") {\n      this.setState({\n        isDescValid: true\n      });\n    } else {\n      addTodo(title, desc);\n    }\n  };\n  render() {\n    const { isAddLoading } = this.props;\n    const { isTitleValid, isDescValid } = this.state;\n    return (\n      <form className=\"todo-form\" onSubmit={this.submitHandler}>\n        <FormGroup className=\"some-class\" legendText=\"\">\n          <TextInput\n            id=\"title\"\n            className=\"some-class\"\n            value={this.state.title}\n            labelText=\"Todo Title\"\n            name=\"title\"\n            type=\"\"\n            placeholder=\"Please input a todo title ðŸ˜„\"\n            hideLabel={false}\n            invalidText=\"title can't be empty\"\n            onChange={this.changeHandler}\n            invalid={isTitleValid}\n          />\n        </FormGroup>\n        <FormGroup className=\"some-class\" legendText=\"\">\n          <TextArea\n            name=\"desc\"\n            className=\"some-class\"\n            hideLabel={false}\n            labelText=\"Desc can't be empty\"\n            invalidText=\"Desc\"\n            placeholder=\"Todo Description\"\n            id=\"desc\"\n            value={this.state.desc}\n            onChange={this.changeHandler}\n            invalid={isDescValid}\n          />\n        </FormGroup>\n        <Button\n          kind=\"primary\"\n          className=\"some-class\"\n          iconDescription=\"Add Todo\"\n          small\n          type=\"submit\"\n        >\n          {isAddLoading ? <InlineLoading description=\"\" /> : \"Add Todo\"}\n        </Button>\n      </form>\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  StructuredListRow,\n  StructuredListCell,\n  Icon\n} from \"carbon-components-react\";\nimport { iconDelete } from \"carbon-icons\";\nimport { Todo } from \"../../types/todo\";\n\ninterface TodoItemProps {\n  todo: Todo,\n  deleteTodo: (id: number) => void\n}\n\nconst TodoItem: React.FunctionComponent<TodoItemProps> = props => {\n  const { todo, deleteTodo } = props;\n  const {id, title, desc} = todo;\n  return (\n    <StructuredListRow>\n      <StructuredListCell noWrap>{title}</StructuredListCell>\n      <StructuredListCell>{desc}</StructuredListCell>\n      <StructuredListCell>\n        <Icon\n          className=\"bx--structured-list-svg\"\n          icon={iconDelete}\n          description=\"select an option\"\n          onClick={() => {\n            deleteTodo(id)\n          }}\n        />\n      </StructuredListCell>\n    </StructuredListRow>\n  );\n};\n\nexport default TodoItem;\n","import * as React from \"react\";\nimport {\n  StructuredListRow,\n  StructuredListCell,\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  Icon\n} from \"carbon-components-react\";\nimport { iconAdd } from \"carbon-icons\";\nimport TodoItem from \"./TodoItem\";\nimport { Todo } from \"./../../types/todo\";\nimport \"./TodoList.scss\";\n\nexport interface TodoListProps {\n  todos: Todo[]\n  history: any\n  deleteTodo: (id: number) => void\n}\n\nconst TodoList: React.FunctionComponent<TodoListProps> = props => {\n  const { todos ,history, deleteTodo} = props;\n  return (\n    <StructuredListWrapper selection border>\n      <StructuredListHead>\n        <StructuredListRow head>\n          <StructuredListCell head>Title</StructuredListCell>\n          <StructuredListCell head>Description</StructuredListCell>\n          <StructuredListCell head>\n            <Icon\n              className=\"icon-add\"\n              icon={iconAdd}\n              description=\"add a todo\"\n              onClick={() => {\n                history.push('/form')\n              }}\n            />\n          </StructuredListCell>\n        </StructuredListRow>\n      </StructuredListHead>\n      <StructuredListBody>\n        {todos.length > 0 &&\n          todos.map(todo => <TodoItem key={todo.id} todo={todo} deleteTodo={deleteTodo} />)}\n      </StructuredListBody>\n    </StructuredListWrapper>\n  );\n};\n\nexport default TodoList;\n","import { Todo } from \"./../types/todo\";\n\nexport const addTodoAPI = (todo: Todo, cb: any) => {\n  const todos = JSON.parse(localStorage.getItem(\"todos\") as string);\n  let arr: Array<Todo> = [];\n  if (todos.length === 0) {\n    arr = [Object.assign({ id: 1 }, todo)];\n    localStorage.setItem(\"todos\", JSON.stringify(arr));\n  } else {\n    arr = todos.concat([\n      Object.assign({ id: todos[todos.length - 1].id + 1 }, todo)\n    ]);\n    localStorage.setItem(\"todos\", JSON.stringify(arr));\n  }\n  if (typeof cb === \"function\") {\n    cb(arr);\n  }\n};\n\nexport const deleteTodoAPI = (id: number, cb: any) => {\n  const todos = JSON.parse(localStorage.getItem(\"todos\") as string);\n  const arr = todos.filter(todo => todo.id !== id);\n  localStorage.setItem(\"todos\", JSON.stringify(arr));\n  if (typeof cb === \"function\") {\n    cb(arr);\n  }\n};\n\nexport const listTodos = (status: string, cb: any) => {\n  if (localStorage.getItem(\"todos\") === null) {\n    localStorage.setItem(\"todos\", JSON.stringify([]));\n  }\n  const todos = JSON.parse(localStorage.getItem(\"todos\") as string);\n  if (typeof cb === \"function\") {\n    cb(filterTodos(status, todos));\n  }\n};\n\nexport const updateTodo = (todo: Todo, cb: any) => {\n  let todos = JSON.parse(localStorage.getItem(\"todos\") as string);\n  for (let i = 0; i < todos.length; i++) {\n    if (todos[i].id === todo.id) {\n      todos[i] = todo;\n      break;\n    }\n  }\n  localStorage.setItem(\"todos\", JSON.stringify(todos));\n  cb(todos);\n};\n\nconst filterTodos = (status: string, todos: Array<Todo>) => {\n  let filteredTodos: Array<Todo> = [];\n  switch (status) {\n    case \"active\": {\n      filteredTodos = todos.filter(todo => todo.isCompleted !== true);\n      break;\n    }\n    case \"completed\": {\n      filteredTodos = todos.filter(todo => todo.isCompleted === true);\n      break;\n    }\n    default:\n      filteredTodos = todos;\n  }\n  return filteredTodos;\n};\n","import * as React from \"react\";\nimport { Todo } from \"./../types/todo\";\nimport { TodoForm } from \"./../components\";\nimport { addTodoAPI } from \"./../apis/todo\";\n\ninterface TodoPageProps {\n  history: any;\n}\n\ninterface FormPageState {\n  isAddLoading: boolean;\n}\n\nexport default class FormPage extends React.PureComponent<\n  TodoPageProps,\n  FormPageState\n> {\n  state: FormPageState = {\n    isAddLoading: false\n  };\n\n  addTodo = (title: string, desc: string) => {\n    const { history } = this.props;\n    const todo = { title, desc, isCompleted: false } as Todo;\n    this.setState({\n      isAddLoading: true\n    });\n    setTimeout(() => {\n      addTodoAPI(todo, () => {\n        this.setState({\n          isAddLoading: false\n        });\n        history.push(\"/\");\n      });\n    }, 1000);\n  };\n  render() {\n    const { isAddLoading } = this.state;\n    const todoFormProps = {\n      addTodo: this.addTodo,\n      isAddLoading\n    };\n    return (\n      <article className=\"todo-container\">\n        <TodoForm {...todoFormProps} />\n      </article>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { StructuredListSkeleton } from \"carbon-components-react\";\nimport { Todo } from \"./../types/todo\";\nimport { TodoList, Footer } from \"./../components\";\nimport { TodoListProps } from \"./../components/todo/TodoList\";\nimport { listTodos, deleteTodoAPI } from \"./../apis/todo\";\n\ninterface TodoPageProps {\n  history: any;\n}\n\ninterface TodoPageState {\n  todos: Array<Todo>;\n  isLoading: boolean;\n}\n\nexport default class TodoPage extends React.PureComponent<\n  TodoPageProps,\n  TodoPageState\n> {\n  state: TodoPageState = {\n    todos: [],\n    isLoading: true\n  };\n\n  componentDidMount() {\n    // fetch list\n    setTimeout(() => {\n      listTodos(\"\", arr => {\n        this.setState({\n          todos: arr,\n          isLoading: false\n        });\n      });\n    }, 1000);\n  }\n\n  _deleteTodo = (id) =>{\n    deleteTodoAPI(id,(todos)=>{\n      this.setState({todos})\n    })\n  }\n\n\n  render() {\n    const { todos, isLoading } = this.state;\n    const { history } = this.props;\n    const todoListProps = {\n      todos,\n      history,\n      deleteTodo: this._deleteTodo\n    } as TodoListProps;\n    const footerProps = {\n      todoAmount: todos.length,\n      clickFilterHandler: () => {}\n    };\n    return (\n      <article className=\"todo-container\">\n        {isLoading ? (\n          <StructuredListSkeleton />\n        ) : (\n          <TodoList {...todoListProps} />\n        )}\n        <Footer {...footerProps} />\n      </article>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {TodoPage, FormPage} from './pages';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n          <Route exact path='/' component={TodoPage}  />\n          <Route  path='/form' component={FormPage}  />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './../node_modules/carbon-components/css/carbon-components.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}